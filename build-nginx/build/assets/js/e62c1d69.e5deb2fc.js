"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9911],{3156:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var n=t(4848),a=t(8453);const s={},o="2.2 Reduce Operator",c={id:"awel/awel_tutorial/basic_syntax/2.2_reduce_operator",title:"2.2 Reduce Operator",description:"The ReduceStreamOperator is used to reduce the streaming data to non-streaming data.",source:"@site/docs/awel/awel_tutorial/basic_syntax/2.2_reduce_operator.md",sourceDirName:"awel/awel_tutorial/basic_syntax",slug:"/awel/awel_tutorial/basic_syntax/2.2_reduce_operator",permalink:"/docs/latest/awel/awel_tutorial/basic_syntax/2.2_reduce_operator",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"2.1 Map Operator",permalink:"/docs/latest/awel/awel_tutorial/basic_syntax/2.1_map_operator"},next:{title:"2.3 Join Operator",permalink:"/docs/latest/awel/awel_tutorial/basic_syntax/2.3_join_operator"}},i={},d=[{value:"Build a <code>ReduceStreamOperator</code> with a reduce function",id:"build-a-reducestreamoperator-with-a-reduce-function",level:2},{value:"Implement a custom <code>ReduceStreamOperator</code>",id:"implement-a-custom-reducestreamoperator",level:2},{value:"Examples",id:"examples",level:2},{value:"Sum the numbers",id:"sum-the-numbers",level:3}];function u(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"22-reduce-operator",children:"2.2 Reduce Operator"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"ReduceStreamOperator"})," is used to reduce the streaming data to non-streaming data."]}),"\n",(0,n.jsxs)(r.p,{children:["There are two ways to use the ",(0,n.jsx)(r.code,{children:"ReduceStreamOperator"}),":"]}),"\n",(0,n.jsxs)(r.h2,{id:"build-a-reducestreamoperator-with-a-reduce-function",children:["Build a ",(0,n.jsx)(r.code,{children:"ReduceStreamOperator"})," with a reduce function"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'from dbgpt.core.awel import DAG, ReduceStreamOperator\n\nwith DAG("awel_reduce_operator") as dag:\n    task = ReduceStreamOperator(reduce_function=lambda x, y: x + y)\n'})}),"\n",(0,n.jsxs)(r.h2,{id:"implement-a-custom-reducestreamoperator",children:["Implement a custom ",(0,n.jsx)(r.code,{children:"ReduceStreamOperator"})]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'from dbgpt.core.awel import DAG, ReduceStreamOperator\n\nclass MySumOperator(ReduceStreamOperator[int, int]):\n    async def reduce(self, x: int, y: int) -> int:\n        return x + y\n\nwith DAG("awel_reduce_operator") as dag:\n    task = MySumOperator()\n'})}),"\n",(0,n.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(r.h3,{id:"sum-the-numbers",children:"Sum the numbers"}),"\n",(0,n.jsxs)(r.p,{children:["Create a new file named ",(0,n.jsx)(r.code,{children:"reduce_operator_sum_numbers.py"})," in the ",(0,n.jsx)(r.code,{children:"awel_tutorial"})," directory and add the following code:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import asyncio\nfrom typing import AsyncIterator\nfrom dbgpt.core.awel import DAG, ReduceStreamOperator, StreamifyAbsOperator\n\nclass NumberProducerOperator(StreamifyAbsOperator[int, int]):\n    """Create a stream of numbers from 0 to `n-1`"""\n    async def streamify(self, n: int) -> AsyncIterator[int]:\n        for i in range(n):\n            yield i\n            \nclass MySumOperator(ReduceStreamOperator[int, int]):\n    async def reduce(self, x: int, y: int) -> int:\n        return x + y\n\nwith DAG("sum_numbers_dag") as dag:\n    task = NumberProducerOperator()\n    sum_task = MySumOperator()\n    task >> sum_task\n\no1 = asyncio.run(sum_task.call(call_data=5))\nif o1 == sum(range(5)):\n    print(f"Success! n is 5, sum is {o1}")\nelse:\n    print("Failed")\no2 = asyncio.run(sum_task.call(call_data=10))\nif o2 == sum(range(10)):\n    print(f"Success! n is 10, sum is {o2}")\nelse:\n    print("Failed")\n'})}),"\n",(0,n.jsx)(r.p,{children:"Then run the following command to execute the code:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"poetry run python awel_tutorial/reduce_operator_sum_numbers.py\n"})}),"\n",(0,n.jsx)(r.p,{children:'And you will see "Success! n is 5, sum is 10" and "Success! n is 10, sum is 45" printed to the console.'}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"Success! n is 5, sum is 10\nSuccess! n is 10, sum is 45\n"})})]})}function l(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>c});var n=t(6540);const a={},s=n.createContext(a);function o(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);