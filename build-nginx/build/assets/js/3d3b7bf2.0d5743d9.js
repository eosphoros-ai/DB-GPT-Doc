"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1142],{9319:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>d,metadata:()=>r,toc:()=>i});var o=t(4848),a=t(8453);const d={},l="Command Line Usage",r={id:"application/advanced_tutorial/cli",title:"Command Line Usage",description:"In addition to interface usage, this project also provides a wealth of command line tools. It can realize model deployment, service deployment and start and stop, knowledge base operations (viewing, deleting, document loading), debugging and problem locating and other capabilities.",source:"@site/docs/application/advanced_tutorial/cli.md",sourceDirName:"application/advanced_tutorial",slug:"/application/advanced_tutorial/cli",permalink:"/docs/latest/application/advanced_tutorial/cli",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"SMMF",permalink:"/docs/latest/application/advanced_tutorial/smmf"},next:{title:"API Interface Usage",permalink:"/docs/latest/application/advanced_tutorial/api"}},s={},i=[{value:"Preparation",id:"preparation",level:2},{value:"Usage",id:"usage",level:2},{value:"Installation",id:"installation",level:2},{value:"Knowledge Command",id:"knowledge-command",level:2},{value:"Load command",id:"load-command",level:4},{value:"List command",id:"list-command",level:4},{value:"Delete command",id:"delete-command",level:4},{value:"Model command",id:"model-command",level:2},{value:"Chat command",id:"chat-command",level:4},{value:"List Command",id:"list-command-1",level:4},{value:"Restart command",id:"restart-command",level:4},{value:"Start command",id:"start-command",level:4},{value:"Stop command",id:"stop-command",level:4},{value:"Start/Stop Command",id:"startstop-command",level:2},{value:"Apiserver",id:"apiserver",level:4},{value:"Controller command",id:"controller-command",level:4},{value:"Webserver command",id:"webserver-command",level:4},{value:"worker command",id:"worker-command",level:4},{value:"Debugging",id:"debugging",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h4:"h4",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"command-line-usage",children:"Command Line Usage"}),"\n",(0,o.jsx)(n.p,{children:"In addition to interface usage, this project also provides a wealth of command line tools. It can realize model deployment, service deployment and start and stop, knowledge base operations (viewing, deleting, document loading), debugging and problem locating and other capabilities."}),"\n",(0,o.jsx)(n.p,{children:"The following is a systematic introduction to the use of related command line tools."}),"\n",(0,o.jsx)(n.h2,{id:"preparation",children:"Preparation"}),"\n",(0,o.jsxs)(n.p,{children:["Before using the dbgpt command, you first need to complete the installation of the project. For detailed installation tutorial, please refer to: ",(0,o.jsx)(n.a,{href:"/docs/latest/installation/sourcecode",children:"Source code installation"})]}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(n.p,{children:["The command line provides a variety of capabilities, which we can view through the following commands.\nAs shown in the figure, we can see the command list of ",(0,o.jsx)(n.code,{children:"dbgpt"}),", including ",(0,o.jsx)(n.code,{children:"install"}),", ",(0,o.jsx)(n.code,{children:"knowledge"}),", ",(0,o.jsx)(n.code,{children:"model"}),", ",(0,o.jsx)(n.code,{children:"start"}),", ",(0,o.jsx)(n.code,{children:"stop"})," and ",(0,o.jsx)(n.code,{children:"trace"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"~ dbgpt --help\nAlready connect 'dbgpt'\nUsage: dbgpt [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --log-level TEXT  Log level\n  --version         Show the version and exit.\n  --help            Show this message and exit.\n\nCommands:\n  install    Install dependencies, plugins, etc.\n  knowledge  Knowledge command line tool\n  model      Clients that manage model serving\n  start      Start specific server.\n  stop       Stop specific server.\n  trace      Analyze and visualize trace spans.\n"})}),"\n",(0,o.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"install"})," command provides installation and use of various dependency packages and plugins"]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.p,{children:"The agents is currently under reconstruction, and related functions will be available in the next version"})}),"\n",(0,o.jsx)(n.h2,{id:"knowledge-command",children:"Knowledge Command"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"dbgpt knowledge"})," command mainly provides operations related to the knowledge base. The current main commands are ",(0,o.jsx)(n.code,{children:"delete"}),", ",(0,o.jsx)(n.code,{children:"list"}),", and ",(0,o.jsx)(n.code,{children:"load"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"~ dbgpt knowledge --help\nAlready connect 'dbgpt'\nUsage: dbgpt knowledge [OPTIONS] COMMAND [ARGS]...\n\n  Knowledge command line tool\n\nOptions:\n  --address TEXT  Address of the Api server(If not set, try to read from\n                  environment variable: API_ADDRESS).  [default:\n                  http://127.0.0.1:5000]\n  --help          Show this message and exit.\n\nCommands:\n  delete  Delete your knowledge space or document in space\n  list    List knowledge space\n  load    Load your local documents to DB-GPT\n"})}),"\n",(0,o.jsx)(n.h4,{id:"load-command",children:"Load command"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"dbgpt knowledge load"})," refers to the loading of knowledge base documents. You can load knowledge base documents in batches through the load command."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"~ dbgpt knowledge load --help\nAlready connect 'dbgpt'\nUsage: dbgpt knowledge load [OPTIONS]\n\n  Load your local documents to DB-GPT\n\nOptions:\n  --space_name TEXT         Your knowledge space name  [default: default]\n  --vector_store_type TEXT  Vector store type.  [default: Chroma]\n  --local_doc_path TEXT     Your document directory or document file path.\n                            [default: /Users/magic/workspace/github/eosphoros-\n                            ai/DB-GPT/pilot/datasets]\n  --skip_wrong_doc          Skip wrong document.\n  --overwrite               Overwrite existing document(they has same name).\n  --max_workers INTEGER     The maximum number of threads that can be used to\n                            upload document.\n  --pre_separator TEXT      Preseparator, this separator is used for pre-\n                            splitting before the document is actually split by\n                            the text splitter. Preseparator are not included\n                            in the vectorized text.\n  --separator TEXT          This is the document separator. Currently, only\n                            one separator is supported.\n  --chunk_size INTEGER      Maximum size of chunks to split.\n  --chunk_overlap INTEGER   Overlap in characters between chunks.\n  --help                    Show this message and exit.\n"})}),"\n",(0,o.jsx)("p",{align:"left",children:(0,o.jsx)("img",{src:"/img/cli/kbqa.gif",width:"720px"})}),"\n",(0,o.jsx)(n.h4,{id:"list-command",children:"List command"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"dbgpt knowledge list"})," command mainly displays information related to the knowledge base. Such as displaying knowledge space, document content, Chunk content, etc."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"~ dbgpt knowledge list --help\nAlready connect 'dbgpt'\nUsage: dbgpt knowledge list [OPTIONS]\n\n  List knowledge space\n\nOptions:\n  --space_name TEXT               Your knowledge space name. If None, list all\n                                  spaces\n  --doc_id INTEGER                Your document id in knowledge space. If Not\n                                  None, list all chunks in current document\n  --page INTEGER                  The page for every query  [default: 1]\n  --page_size INTEGER             The page size for every query  [default: 20]\n  --show_content                  Query the document content of chunks\n  --output [text|html|csv|latex|json]\n                                  The output format\n  --help                          Show this message and exit.\n"})}),"\n",(0,o.jsx)(n.h4,{id:"delete-command",children:"Delete command"}),"\n",(0,o.jsxs)(n.p,{children:["The delete command supports the deletion of knowledge base and documents. You can view related command details through ",(0,o.jsx)(n.code,{children:"dbgpt knowledge delete --help"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"~ dbgpt knowledge delete --help\nAlready connect 'dbgpt'\nUsage: dbgpt knowledge delete [OPTIONS]\n\n  Delete your knowledge space or document in space\n\nOptions:\n  --space_name TEXT  Your knowledge space name  [default: default]\n  --doc_name TEXT    The document name you want to delete. If doc_name is\n                     None, this command will delete the whole space.\n  -y                 Confirm your choice\n  --help             Show this message and exit.\n"})}),"\n",(0,o.jsx)("p",{align:"left",children:(0,o.jsx)("img",{src:"/img/cli/kd_new.gif",width:"720px"})}),"\n",(0,o.jsx)(n.h2,{id:"model-command",children:"Model command"}),"\n",(0,o.jsxs)(n.p,{children:["Model related commands are mainly used when deploying multiple models. For model cluster deployment, you can view the ",(0,o.jsx)(n.a,{href:"/docs/installation/cluster.md",children:"cluster deployment mode"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"~ dbgpt model --help\nAlready connect 'dbgpt'\nUsage: dbgpt model [OPTIONS] COMMAND [ARGS]...\n\n  Clients that manage model serving\n\nOptions:\n  --address TEXT  Address of the Model Controller to connect to. Just support\n                  light deploy model, If the environment variable\n                  CONTROLLER_ADDRESS is configured, read from the environment\n                  variable\n  --help          Show this message and exit.\n\nCommands:\n  chat     Interact with your bot from the command line\n  list     List model instances\n  restart  Restart model instances\n  start    Start model instances\n  stop     Stop model instances\n"})}),"\n",(0,o.jsx)(n.h4,{id:"chat-command",children:"Chat command"}),"\n",(0,o.jsxs)(n.p,{children:["You can use the ",(0,o.jsx)(n.code,{children:"dbgpt model chat"})," command to communicate with the model in the command line terminal"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"~ dbgpt model chat --help\nAlready connect 'dbgpt'\nUsage: dbgpt model chat [OPTIONS]\n\n  Interact with your bot from the command line\n\nOptions:\n  --model_name TEXT  The name of model  [required]\n  --system TEXT      System prompt\n  --help             Show this message and exit.\n"})}),"\n",(0,o.jsx)(n.h4,{id:"list-command-1",children:"List Command"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"~ dbgpt model list --help\nAlready connect 'dbgpt'\nUsage: dbgpt model list [OPTIONS]\n\n  List model instances\n\nOptions:\n  --model_name TEXT  The name of model\n  --model_type TEXT  The type of model\n  --help             Show this message and exit.\n"})}),"\n",(0,o.jsx)(n.h4,{id:"restart-command",children:"Restart command"}),"\n",(0,o.jsxs)(n.p,{children:["The model can be restarted through the ",(0,o.jsx)(n.code,{children:"dbgpt model restart"})," command"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"~ dbgpt model restart  --help\nAlready connect 'dbgpt'\nUsage: dbgpt model restart [OPTIONS]\n\n  Restart model instances\n\nOptions:\n  --model_name TEXT  The name of model  [required]\n  --model_type TEXT  The type of model\n  --help             Show this message and exit.\n"})}),"\n",(0,o.jsx)(n.h4,{id:"start-command",children:"Start command"}),"\n",(0,o.jsxs)(n.p,{children:["The model can be start through the ",(0,o.jsx)(n.code,{children:"dbgpt model start"})," command"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"~ dbgpt model start  --help\nAlready connect 'dbgpt'\nUsage: dbgpt model start [OPTIONS]\n\n  Start model instances\n\nOptions:\n  --model_name TEXT           The model name to deploy  [required]\n  --model_path TEXT           The model path to deploy\n  --host TEXT                 The remote host to deploy model  [default:\n                              30.183.153.197]\n  --port INTEGER              The remote port to deploy model  [default: 5000]\n  --worker_type TEXT          Worker type  [default: llm]\n  --device TEXT               Device to run model. If None, the device is\n                              automatically determined\n  --model_type TEXT           Model type: huggingface, llama.cpp, proxy and\n                              vllm  [default: huggingface]\n  --prompt_template TEXT      Prompt template. If None, the prompt template is\n                              automatically determined from model path,\n                              supported template: zero_shot,vicuna_v1.1,llama-\n                              2,codellama,alpaca,baichuan-chat,internlm-chat\n  --max_context_size INTEGER  Maximum context size  [default: 4096]\n  --num_gpus INTEGER          The number of gpus you expect to use, if it is\n                              empty, use all of them as much as possible\n  --max_gpu_memory TEXT       The maximum memory limit of each GPU, only valid\n                              in multi-GPU configuration\n  --cpu_offloading            CPU offloading\n  --load_8bit                 8-bit quantization\n  --load_4bit                 4-bit quantization\n  --quant_type TEXT           Quantization datatypes, `fp4` (four bit float)\n                              and `nf4` (normal four bit float), only valid\n                              when load_4bit=True  [default: nf4]\n  --use_double_quant          Nested quantization, only valid when\n                              load_4bit=True  [default: True]\n  --compute_dtype TEXT        Model compute type\n  --trust_remote_code         Trust remote code  [default: True]\n  --verbose                   Show verbose output.\n  --help                      Show this message and exit.\n"})}),"\n",(0,o.jsx)(n.h4,{id:"stop-command",children:"Stop command"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"dbgpt model stop"})," command is mainly responsible for stopping the model."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"~ dbgpt model stop  --help\nAlready connect 'dbgpt'\nUsage: dbgpt model stop [OPTIONS]\n\n  Stop model instances\n\nOptions:\n  --model_name TEXT  The name of model  [required]\n  --model_type TEXT  The type of model\n  --host TEXT        The remote host to stop model  [required]\n  --port INTEGER     The remote port to stop model  [required]\n  --help             Show this message and exit.\n"})}),"\n",(0,o.jsx)("p",{align:"left",children:(0,o.jsx)("img",{src:"/img/cli/cli_m.gif",width:"720px"})}),"\n",(0,o.jsx)(n.h2,{id:"startstop-command",children:"Start/Stop Command"}),"\n",(0,o.jsxs)(n.p,{children:["The commands related to ",(0,o.jsx)(n.code,{children:"dbgpt start"})," and ",(0,o.jsx)(n.code,{children:"dbgpt stop"})," are a set of interfaces related to service registration discovery. There are ",(0,o.jsx)(n.code,{children:"apiserver"}),", ",(0,o.jsx)(n.code,{children:"controller"}),", ",(0,o.jsx)(n.code,{children:"worker"})," and ",(0,o.jsx)(n.code,{children:"webserver"})," respectively."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"~ dbgpt start --help\nAlready connect 'dbgpt'\nUsage: dbgpt start [OPTIONS] COMMAND [ARGS]...\n\n  Start specific server.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  apiserver   Start apiserver\n  controller  Start model controller\n  webserver   Start webserver(dbgpt_server.py)\n  worker      Start model worker\n"})}),"\n",(0,o.jsx)(n.h4,{id:"apiserver",children:"Apiserver"}),"\n",(0,o.jsxs)(n.p,{children:["You can start the model's API service through ",(0,o.jsx)(n.code,{children:"dbgpt start apiserver"}),". The default startup port is 8100."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"~ dbgpt start apiserver --help\nAlready connect 'dbgpt'\nUsage: dbgpt start apiserver [OPTIONS]\n\n  Start apiserver\n\nOptions:\n  --host TEXT                Model API server deploy host  [default: 0.0.0.0]\n  --port INTEGER             Model API server deploy port  [default: 8100]\n  --daemon                   Run Model API server in background\n  --controller_addr TEXT     The Model controller address to connect\n                             [default: http://127.0.0.1:8000]\n  --api_keys TEXT            Optional list of comma separated API keys\n  --log_level TEXT           Logging level\n  --log_file TEXT            The filename to store log  [default:\n                             dbgpt_model_apiserver.log]\n  --tracer_file TEXT         The filename to store tracer span records\n                             [default: dbgpt_model_apiserver_tracer.jsonl]\n  --tracer_storage_cls TEXT  The storage class to storage tracer span records\n  --help                     Show this message and exit.\n\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"start apiserver"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'~ dbgpt start apiserver\n\n    Already connect \'dbgpt\'\n    2023-12-07 14:35:21 B-4TMH9N3X-2120.local pilot.component[95201] INFO Register component with name dbgpt_model_registry and instance: <pilot.model.cluster.controller.controller.ModelRegistryClient object at 0x28f4e0c70>\n    2023-12-07 14:35:21 B-4TMH9N3X-2120.local pilot.component[95201] INFO Register component with name dbgpt_worker_manager_factory and instance: <pilot.model.cluster.worker.manager._DefaultWorkerManagerFactory object at 0x28f4e2110>\n    2023-12-07 14:35:21 B-4TMH9N3X-2120.local pilot.component[95201] INFO Register component with name dbgpt_model_api_server and instance: <pilot.model.cluster.apiserver.api.APIServer object at 0x28f4e2170>\n    INFO:     Started server process [95201]\n    INFO:     Waiting for application startup.\n    INFO:     Application startup complete.\n    INFO:     Uvicorn running on http://0.0.0.0:8100 (Press CTRL+C to quit)\n    INFO:     127.0.0.1:56638 - "GET /docs HTTP/1.1" 200 OK\n    INFO:     127.0.0.1:56665 - "GET /openapi.json HTTP/1.1" 200 OK\n    ^CINFO:     Shutting down\n    INFO:     Waiting for application shutdown.\n    INFO:     Application shutdown complete.\n    INFO:     Finished server process [95201]\n'})}),"\n",(0,o.jsx)(n.h4,{id:"controller-command",children:"Controller command"}),"\n",(0,o.jsxs)(n.p,{children:["The management and control service can be started through ",(0,o.jsx)(n.code,{children:"dbgpt start controller"}),". The default startup port is 8000"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"~ dbgpt start --help\nAlready connect 'dbgpt'\nUsage: dbgpt start [OPTIONS] COMMAND [ARGS]...\n\n  Start specific server.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  apiserver   Start apiserver\n  controller  Start model controller\n  webserver   Start webserver(dbgpt_server.py)\n  worker      Start model worker\n(dbgpt_env) magic@B-4TMH9N3X-2120 ~ % dbgpt start controller\nAlready connect 'dbgpt'\nINFO:     Started server process [96797]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\n"})}),"\n",(0,o.jsx)(n.h4,{id:"webserver-command",children:"Webserver command"}),"\n",(0,o.jsxs)(n.p,{children:["The front-end service can be started through ",(0,o.jsx)(n.code,{children:"dbgpt start webserver"}),", the default port is 5000, and can be accessed through  ",(0,o.jsx)(n.code,{children:"http://127.0.0.1:5000"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"~ dbgpt start webserver --help\nAlready connect 'dbgpt'\nUsage: dbgpt start webserver [OPTIONS]\n\n  Start webserver(dbgpt_server.py)\n\nOptions:\n  --host TEXT                Webserver deploy host  [default: 0.0.0.0]\n  --port INTEGER             Webserver deploy port  [default: 5000]\n  --daemon                   Run Webserver in background\n  --controller_addr TEXT     The Model controller address to connect. If None,\n                             read model controller address from environment\n                             key `MODEL_SERVER`.\n  --model_name TEXT          The default model name to use. If None, read\n                             model name from environment key `LLM_MODEL`.\n  --share                    Whether to create a publicly shareable link for\n                             the interface. Creates an SSH tunnel to make your\n                             UI accessible from anywhere.\n  --remote_embedding         Whether to enable remote embedding models. If it\n                             is True, you need to start a embedding model\n                             through `dbgpt start worker --worker_type\n                             text2vec --model_name xxx --model_path xxx`\n  --log_level TEXT           Logging level\n  --light                    enable light mode\n  --log_file TEXT            The filename to store log  [default:\n                             dbgpt_webserver.log]\n  --tracer_file TEXT         The filename to store tracer span records\n                             [default: dbgpt_webserver_tracer.jsonl]\n  --tracer_storage_cls TEXT  The storage class to storage tracer span records\n  --disable_alembic_upgrade  Whether to disable alembic to initialize and\n                             upgrade database metadata\n  --help                     Show this message and exit.\n"})}),"\n",(0,o.jsx)("p",{align:"left",children:(0,o.jsx)("img",{src:"/img/cli/start_cli_new.gif",width:"720px"})}),"\n",(0,o.jsx)(n.h4,{id:"worker-command",children:"worker command"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"dbgpt start worker"})," is mainly used to start the working model. For detailed usage, ",(0,o.jsx)(n.a,{href:"/docs/latest/installation/model_service/cluster",children:"cluster deployment"})]}),"\n",(0,o.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,o.jsxs)(n.p,{children:["The dbgpt project provides a wealth of debug commands. For detailed usage, ",(0,o.jsx)(n.a,{href:"/docs/latest/application/advanced_tutorial/debugging",children:"debugging"})]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var o=t(6540);const a={},d=o.createContext(a);function l(e){const n=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),o.createElement(d.Provider,{value:n},e.children)}}}]);