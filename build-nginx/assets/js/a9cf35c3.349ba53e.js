"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7524],{6693:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=t(4848),a=t(8453);const s={},i="AWEL(Agentic Workflow Expression Language)",l={id:"awel",title:"AWEL(Agentic Workflow Expression Language)",description:"Agentic Workflow Expression Language(AWEL) is a set of intelligent agent workflow expression language specially designed for large model application",source:"@site/docs/awel.md",sourceDirName:".",slug:"/awel",permalink:"/docs/latest/awel",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Why use AWEL?",permalink:"/docs/latest/awel/why_use_awel"},next:{title:"Released V0.5.0 | Develop native data applications through workflows and agents",permalink:"/docs/latest/changelog/Released_V0.5.0"}},o={},p=[{value:"AWEL Design",id:"awel-design",level:2},{value:"Examples",id:"examples",level:2},{value:"Operators",id:"operators",level:2},{value:"Example of API-RAG",id:"example-of-api-rag",level:3},{value:"Example of LLM + cache",id:"example-of-llm--cache",level:4},{value:"AgentFream Example",id:"agentfream-example",level:3},{value:"DSL Example",id:"dsl-example",level:3},{value:"Currently supported operators",id:"currently-supported-operators",level:2},{value:"Executable environment",id:"executable-environment",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"awelagentic-workflow-expression-language",children:"AWEL(Agentic Workflow Expression Language)"}),"\n",(0,r.jsx)(n.p,{children:"Agentic Workflow Expression Language(AWEL) is a set of intelligent agent workflow expression language specially designed for large model application\ndevelopment. It provides great functionality and flexibility. Through the AWEL API, you can focus on the development of business logic for LLMs applications\nwithout paying attention to cumbersome model and environment details."}),"\n",(0,r.jsx)(n.p,{children:"AWEL adopts a layered API design. AWEL's layered API design architecture is shown in the figure below."}),"\n",(0,r.jsx)("p",{align:"left",children:(0,r.jsx)("img",{src:"/img/awel.png",width:"480px"})}),"\n",(0,r.jsx)(n.h2,{id:"awel-design",children:"AWEL Design"}),"\n",(0,r.jsx)(n.p,{children:"AWEL is divided into three levels in deign, namely the operator layer, AgentFream layer and DSL layer. The following is a brief introduction\nto the three levels."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Operator layer"}),"\nThe operator layer refers to the most basic operation atoms in the LLM application development process,\nsuch as when developing a RAG application. Retrieval, vectorization, model interaction, prompt processing, etc.\nare all basic operators. In the subsequent development, the framework will further abstract and standardize the design of operators.\nA set of operators can be quickly implemented based on standard APIs"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"AgentFream layer"}),"\nThe AgentFream layer further encapsulates operators and can perform chain calculations based on operators.\nThis layer of chain computing also supports distribution, supporting a set of chain computing operations such as filter, join, map, reduce, etc. More calculation logic will be supported in the future."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"DSL layer"}),"\nThe DSL layer provides a set of standard structured representation languages, which can complete the operations of AgentFream and operators by writing DSL statements, making it more deterministic to write large model applications around data, avoiding the uncertainty of writing in natural language, and making it easier to write around data. Application programming with large models becomes deterministic application programming."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.p,{children:"The preliminary version of AWEL has alse been released, and we have provided some built-in usage examples."}),"\n",(0,r.jsx)(n.h2,{id:"operators",children:"Operators"}),"\n",(0,r.jsx)(n.h3,{id:"example-of-api-rag",children:"Example of API-RAG"}),"\n",(0,r.jsxs)(n.p,{children:["You can find ",(0,r.jsx)(n.a,{href:"https://github.com/eosphoros-ai/DB-GPT/blob/main/examples/awel/simple_rag_example.py",children:"source code"})," from ",(0,r.jsx)(n.code,{children:"examples/awel/simple_rag_example.py"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'with DAG("simple_rag_example") as dag:\n    trigger_task = HttpTrigger(\n        "/examples/simple_rag", methods="POST", request_body=ConversationVo\n    )\n    req_parse_task = RequestParseOperator()\n    # TODO should register prompt template first\n    prompt_task = PromptManagerOperator()\n    history_storage_task = ChatHistoryStorageOperator()\n    history_task = ChatHistoryOperator()\n    embedding_task = EmbeddingEngingOperator()\n    chat_task = BaseChatOperator()\n    model_task = ModelOperator()\n    output_parser_task = MapOperator(lambda out: out.to_dict()["text"])\n\n    (\n        trigger_task\n        >> req_parse_task\n        >> prompt_task\n        >> history_storage_task\n        >> history_task\n        >> embedding_task\n        >> chat_task\n        >> model_task\n        >> output_parser_task\n    )\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"Bit operations will arrange the entire process in the form of DAG"}),"\n",(0,r.jsx)("p",{align:"left",children:(0,r.jsx)("img",{src:"/img/awel_dag_flow.png",width:"360px"})}),"\n",(0,r.jsx)(n.h4,{id:"example-of-llm--cache",children:"Example of LLM + cache"}),"\n",(0,r.jsx)("p",{align:"left",children:(0,r.jsx)("img",{src:"/img/awel_cache_flow.png",width:"360px"})}),"\n",(0,r.jsx)(n.h3,{id:"agentfream-example",children:"AgentFream Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'af = AgentFream(HttpSource("/examples/run_code", method = "post"))\nresult = (\n    af\n    .text2vec(model="text2vec")\n    .filter(vstore, store = "chromadb", db="default")\n    .llm(model="vicuna-13b", temperature=0.7)\n    .map(code_parse_func)\n    .map(run_sql_func)\n    .reduce(lambda a, b: a + b)\n)\nresult.write_to_sink(type=\'source_slink\')\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dsl-example",children:"DSL Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'CREATE WORKFLOW RAG AS\nBEGIN\n    DATA requestData = RECEIVE REQUEST FROM \n    \t\thttp_source("/examples/rags", method = "post");\n        \n    DATA processedData = TRANSFORM requestData USING embedding(model = "text2vec");\n    DATA retrievedData = RETRIEVE DATA \n    \t\tFROM vstore(database = "chromadb", key = processedData)\n    \t\tON ERROR FAIL;\n        \n    DATA modelResult = APPLY LLM "vicuna-13b" \n    \t\tWITH DATA retrievedData AND PARAMETERS (temperature = 0.7)\n    \t\tON ERROR RETRY 2 TIMES;\n        \n    RESPOND TO http_source WITH modelResult\n    \t\tON ERROR LOG "Failed to respond to request";\nEND;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"currently-supported-operators",children:"Currently supported operators"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Basic Operators"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"BaseOperator"}),"\n",(0,r.jsx)(n.li,{children:"JoinOperator"}),"\n",(0,r.jsx)(n.li,{children:"ReduceOperator"}),"\n",(0,r.jsx)(n.li,{children:"MapOperator"}),"\n",(0,r.jsx)(n.li,{children:"BranchOperator"}),"\n",(0,r.jsx)(n.li,{children:"InputOperator"}),"\n",(0,r.jsx)(n.li,{children:"TriggerOperator"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["** Stream Operators**","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"StreamifyAbsOperator"}),"\n",(0,r.jsx)(n.li,{children:"UnstreamifyAbsOperator"}),"\n",(0,r.jsx)(n.li,{children:"TransformStreamAbsOperator"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"executable-environment",children:"Executable environment"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Stand-alone environment"}),"\n",(0,r.jsx)(n.li,{children:"Ray environment"}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(6540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);