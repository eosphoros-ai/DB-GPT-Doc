"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1751],{5364:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=t(4848),a=t(8453);const s={},o="2.5 Streamify Operator",i={id:"awel/awel_tutorial/basic_syntax/2.5_streamify_operator",title:"2.5 Streamify Operator",description:"The StreamifyAbsOperator is used to convert a single data into a stream of data.",source:"@site/versioned_docs/version-v0.5.0/awel/awel_tutorial/basic_syntax/2.5_streamify_operator.md",sourceDirName:"awel/awel_tutorial/basic_syntax",slug:"/awel/awel_tutorial/basic_syntax/2.5_streamify_operator",permalink:"/docs/v0.5.0/awel/awel_tutorial/basic_syntax/2.5_streamify_operator",draft:!1,unlisted:!1,tags:[],version:"v0.5.0",frontMatter:{},sidebar:"docs",previous:{title:"2.4 Branch Operator",permalink:"/docs/v0.5.0/awel/awel_tutorial/basic_syntax/2.4_branch_operator"},next:{title:"2.6 Unstreamify Operator",permalink:"/docs/v0.5.0/awel/awel_tutorial/basic_syntax/2.6_unstreamify_operator"}},c={},l=[{value:"Implement A Custom <code>StreamifyAbsOperator</code>",id:"implement-a-custom-streamifyabsoperator",level:2},{value:"Examples",id:"examples",level:2},{value:"Create A Stream Of Numbers",id:"create-a-stream-of-numbers",level:3},{value:"Mock A Streaming LLM Service",id:"mock-a-streaming-llm-service",level:3}];function d(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"25-streamify-operator",children:"2.5 Streamify Operator"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"StreamifyAbsOperator"})," is used to convert a single data into a stream of data."]}),"\n",(0,n.jsxs)(r.p,{children:["There are one way to use the ",(0,n.jsx)(r.code,{children:"StreamifyAbsOperator"}),":"]}),"\n",(0,n.jsxs)(r.h2,{id:"implement-a-custom-streamifyabsoperator",children:["Implement A Custom ",(0,n.jsx)(r.code,{children:"StreamifyAbsOperator"})]}),"\n",(0,n.jsxs)(r.p,{children:["Just override the ",(0,n.jsx)(r.code,{children:"streamify"})," method to return an async iterable."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'from typing import AsyncIterator\nfrom dbgpt.core.awel import DAG, StreamifyAbsOperator\n\nclass NumberProducerOperator(StreamifyAbsOperator[int, int]):\n    """Create a stream of numbers from 0 to `n-1`"""\n    async def streamify(self, n: int) -> AsyncIterator[int]:\n        for i in range(n):\n            yield i\n\nwith DAG("numbers_dag") as dag:\n    task = NumberProducerOperator()\n'})}),"\n",(0,n.jsxs)(r.p,{children:["In above example, the ",(0,n.jsx)(r.code,{children:"NumberProducerOperator"})," is a custom ",(0,n.jsx)(r.code,{children:"StreamifyAbsOperator"})," that\ncreates a stream of numbers from 0 to ",(0,n.jsx)(r.code,{children:"n-1"}),". It receives a single data ",(0,n.jsx)(r.code,{children:"n"})," and returns\na stream."]}),"\n",(0,n.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(r.h3,{id:"create-a-stream-of-numbers",children:"Create A Stream Of Numbers"}),"\n",(0,n.jsxs)(r.p,{children:["Create a new file named ",(0,n.jsx)(r.code,{children:"streamify_operator_numbers.py"})," in the ",(0,n.jsx)(r.code,{children:"awel_tutorial"})," directory and add the following code:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import asyncio\nfrom typing import AsyncIterator\nfrom dbgpt.core.awel import DAG, StreamifyAbsOperator\n\nclass NumberProducerOperator(StreamifyAbsOperator[int, int]):\n    """Create a stream of numbers from 0 to `n-1`"""\n    async def streamify(self, n: int) -> AsyncIterator[int]:\n        for i in range(n):\n            yield i\n\nwith DAG("numbers_dag") as dag:\n    task = NumberProducerOperator()\n\nasync def print_stream(t, n: int):\n    # Call the streaming operator by `call_stream` method\n    async for i in await t.call_stream(call_data=n):\n        print(i)\n\nasyncio.run(print_stream(task, 10))\n'})}),"\n",(0,n.jsx)(r.p,{children:"And run the following command to execute the code:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"poetry run python awel_tutorial/streamify_operator_numbers.py\n"})}),"\n",(0,n.jsx)(r.p,{children:"And you will see the following output printed to the console."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n"})}),"\n",(0,n.jsx)(r.h3,{id:"mock-a-streaming-llm-service",children:"Mock A Streaming LLM Service"}),"\n",(0,n.jsxs)(r.p,{children:["Create a new file named ",(0,n.jsx)(r.code,{children:"streamify_operator_mock_llm_service.py"})," in the ",(0,n.jsx)(r.code,{children:"awel_tutorial"}),"\ndirectory and add the following code:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import asyncio\nfrom typing import AsyncIterator, List\nfrom dbgpt.core.awel import DAG, StreamifyAbsOperator\n\nclass MockLLMService(StreamifyAbsOperator[str, str]):\n    """Mock a streaming LLM service"""\n    def __init__(self, mock_data: List[str], **kwargs):\n        self.mock_data = mock_data\n        super().__init__(**kwargs)\n        \n    async def streamify(self, user_input: str) -> AsyncIterator[str]:\n        for data in self.mock_data:\n            yield data\n\nwith DAG("mock_llm_service_dag") as dag:\n    task = MockLLMService(mock_data=["Hello, ", "how ", "can ", "I ", "help ", "you?"])\n\nasync def print_stream(t, user_input: str):\n    # Call the streaming operator by `call_stream` method\n    async for i in await t.call_stream(call_data=user_input):\n        print(i, end="")\n\nasyncio.run(print_stream(task, "Hi"))\n'})}),"\n",(0,n.jsx)(r.p,{children:"And run the following command to execute the code:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"poetry run python awel_tutorial/streamify_operator_mock_llm_service.py\n"})}),"\n",(0,n.jsx)(r.p,{children:"And you will see the following output printed to the console."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"Hello, how can I help you?\n"})})]})}function m(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>i});var n=t(6540);const a={},s=n.createContext(a);function o(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);