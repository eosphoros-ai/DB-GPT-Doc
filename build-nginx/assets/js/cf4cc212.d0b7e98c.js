"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4605],{2115:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(4848),o=r(8453);const a={},s="1.3 Custom Operator",l={id:"awel/awel_tutorial/getting_started/1.3_custom_operator",title:"1.3 Custom Operator",description:"Your First Custom Operator",source:"@site/docs/awel/awel_tutorial/getting_started/1.3_custom_operator.md",sourceDirName:"awel/awel_tutorial/getting_started",slug:"/awel/awel_tutorial/getting_started/1.3_custom_operator",permalink:"/docs/latest/awel/awel_tutorial/getting_started/1.3_custom_operator",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"1.2 How AWEL Works",permalink:"/docs/latest/awel/awel_tutorial/getting_started/1.2_how_works"},next:{title:"2.1 Map Operator",permalink:"/docs/latest/awel/awel_tutorial/basic_syntax/2.1_map_operator"}},i={},c=[{value:"Your First Custom Operator",id:"your-first-custom-operator",level:2},{value:"Your First Streaming Operator",id:"your-first-streaming-operator",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"13-custom-operator",children:"1.3 Custom Operator"}),"\n",(0,n.jsx)(t.h2,{id:"your-first-custom-operator",children:"Your First Custom Operator"}),"\n",(0,n.jsx)(t.p,{children:'It is easy to create a custom operator in AWEL. In this section, we will create a\ncustom operator that prints the "Hello, world!" message.'}),"\n",(0,n.jsx)(t.p,{children:"In most cases, you just need to inherit basic operators and override the corresponding\nmethods."}),"\n",(0,n.jsxs)(t.p,{children:["Create a new file named ",(0,n.jsx)(t.code,{children:"hello_world_custom_operator.py"})," in the ",(0,n.jsx)(t.code,{children:"awel_tutorial"}),"\ndirectory and add the following code:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'import asyncio\nfrom dbgpt.core.awel import DAG, MapOperator\n\nclass HelloWorldOperator(MapOperator[str, None]):\n    async def map(self, x: str) -> None:\n        print(f"Hello, {x}!")\n\nwith DAG("awel_hello_world") as dag:\n    task = HelloWorldOperator()\n    \nasyncio.run(task.call(call_data="world"))\n'})}),"\n",(0,n.jsx)(t.p,{children:"And run the following command to execute the code:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"poetry run python awel_tutorial/hello_world_custom_operator.py\n"})}),"\n",(0,n.jsx)(t.p,{children:'And you will see "Hello, world!" printed to the console.'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"Hello, world!\n"})}),"\n",(0,n.jsx)(t.h2,{id:"your-first-streaming-operator",children:"Your First Streaming Operator"}),"\n",(0,n.jsxs)(t.p,{children:["Let's create a streaming operator that creates a stream of numbers from 0 to ",(0,n.jsx)(t.code,{children:"n-1"}),",\nthen doubles each number in another streaming operator."]}),"\n",(0,n.jsxs)(t.p,{children:["Create a new file named ",(0,n.jsx)(t.code,{children:"custom_streaming_operator.py"})," in the ",(0,n.jsx)(t.code,{children:"awel_tutorial"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'import asyncio\nfrom typing import AsyncIterator\nfrom dbgpt.core.awel import DAG, StreamifyAbsOperator, TransformStreamAbsOperator\n\nclass NumberProducerOperator(StreamifyAbsOperator[int, int]):\n    async def streamify(self, n: int) -> AsyncIterator[int]:\n        for i in range(n):\n            yield i\n\nclass NumberDoubleOperator(TransformStreamAbsOperator[int, int]):\n    async def transform_stream(self, it: AsyncIterator) -> AsyncIterator[int]:\n        async for i in it:\n            # Double the number\n            yield i * 2\n            \nwith DAG("numbers_dag") as dag:\n    task = NumberProducerOperator()\n    double_task = NumberDoubleOperator()\n    task >> double_task\n\nasync def helper_call_fn(t, n: int):\n    # Call the streaming operator by `call_stream` method\n    async for i in await t.call_stream(call_data=n):\n        print(i)\n        \nasyncio.run(helper_call_fn(double_task, 10))\n'})}),"\n",(0,n.jsx)(t.p,{children:"And run the following command to execute the code:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"poetry run python awel_tutorial/custom_streaming_operator.py\n"})}),"\n",(0,n.jsx)(t.p,{children:"And you will see the following output printed to the console."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"0\n2\n4\n6\n8\n10\n12\n14\n16\n18\n"})}),"\n",(0,n.jsxs)(t.p,{children:["In this example, we call the ",(0,n.jsx)(t.code,{children:"call_stream"})," method to execute the streaming operator,\nplease don't forget to use ",(0,n.jsx)(t.code,{children:"await"})," to get the streaming result."]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>l});var n=r(6540);const o={},a=n.createContext(o);function s(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);