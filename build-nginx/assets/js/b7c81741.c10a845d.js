"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1329],{4748:(e,l,n)=>{n.r(l),n.d(l,{assets:()=>i,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var t=n(4848),a=n(8453);const o={},r="1.1 Hello World",s={id:"awel/awel_tutorial/getting_started/1.1_hello_world",title:"1.1 Hello World",description:"Preparation",source:"@site/versioned_docs/version-v0.5.1/awel/awel_tutorial/getting_started/1.1_hello_world.md",sourceDirName:"awel/awel_tutorial/getting_started",slug:"/awel/awel_tutorial/getting_started/1.1_hello_world",permalink:"/docs/v0.5.1/awel/awel_tutorial/getting_started/1.1_hello_world",draft:!1,unlisted:!1,tags:[],version:"v0.5.1",frontMatter:{},sidebar:"docs",previous:{title:"AWEL Tutorial",permalink:"/docs/v0.5.1/awel/tutorial"},next:{title:"1.2 How AWEL Works",permalink:"/docs/v0.5.1/awel/awel_tutorial/getting_started/1.2_how_works"}},i={},d=[{value:"Preparation",id:"preparation",level:2},{value:"Creating A Project",id:"creating-a-project",level:2},{value:"Adding DB-GPT Dependency",id:"adding-db-gpt-dependency",level:2},{value:"First Hello World",id:"first-hello-world",level:2},{value:"Anatomy Of AWEL Code",id:"anatomy-of-awel-code",level:2},{value:"Hello World With <code>asyncio</code>",id:"hello-world-with-asyncio",level:2},{value:"Hello World With Two Tasks",id:"hello-world-with-two-tasks",level:2},{value:"DAG Visualization",id:"dag-visualization",level:2}];function c(e){const l={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(l.h1,{id:"11-hello-world",children:"1.1 Hello World"}),"\n",(0,t.jsx)(l.h2,{id:"preparation",children:"Preparation"}),"\n",(0,t.jsxs)(l.p,{children:["In this tutorial, we'll use ",(0,t.jsx)(l.code,{children:"poetry"})," to manage our project dependencies. If you don't have ",(0,t.jsx)(l.code,{children:"poetry"})," installed, you can install it by following the instructions ",(0,t.jsx)(l.a,{href:"https://python-poetry.org/docs/",children:"here"}),"."]}),"\n",(0,t.jsx)(l.h2,{id:"creating-a-project",children:"Creating A Project"}),"\n",(0,t.jsxs)(l.p,{children:["You'll start by creating a new python project. You can name it whatever you like; for this tutorial, we'll call it ",(0,t.jsx)(l.code,{children:"awel-tutorial"}),"."]}),"\n",(0,t.jsx)(l.p,{children:"We suggest making a project directory in your home directory, but you can put it wherever you like."}),"\n",(0,t.jsx)(l.p,{children:"Open a terminal and run the following commands to make a project directory and an AWEL tutorial directory:"}),"\n",(0,t.jsx)(l.p,{children:"For Linux, macOS, or PowerShell, enter this:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"mkdir -p ~/projects\ncd ~/projects\n"})}),"\n",(0,t.jsx)(l.p,{children:"Then, run the following commands to create a new project and change to the new directory:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"poetry new awel-tutorial\ncd awel-tutorial\n"})}),"\n",(0,t.jsx)(l.p,{children:"The tree of the project should look like this:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-plaintext",children:"awel-tutorial\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 awel_tutorial\n\u2502\xa0\xa0 \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 __init__.py\n"})}),"\n",(0,t.jsx)(l.h2,{id:"adding-db-gpt-dependency",children:"Adding DB-GPT Dependency"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:'poetry add "dbgpt>=0.5.1rc0"\n'})}),"\n",(0,t.jsx)(l.h2,{id:"first-hello-world",children:"First Hello World"}),"\n",(0,t.jsx)(l.p,{children:'Next, you\'ll create a simple DAG that prints "Hello, world" to the console.'}),"\n",(0,t.jsxs)(l.p,{children:["Now create a new file called ",(0,t.jsx)(l.code,{children:"first_hello_world.py"})," in the ",(0,t.jsx)(l.code,{children:"awel_tutorial"})," directory and add the following code:"]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-python",children:'from dbgpt.core.awel import DAG, MapOperator\n\nwith DAG("awel_hello_world") as dag:\n    task = MapOperator(map_function=lambda x: print(f"Hello, {x}!"))\ntask._blocking_call(call_data="world")\n'})}),"\n",(0,t.jsx)(l.p,{children:"Now, the tree of the project should look like this:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-plaintext",children:"awel-tutorial\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 awel_tutorial\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 first_hello_world.py\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 __init__.py\n\n"})}),"\n",(0,t.jsx)(l.p,{children:"Then, run the following command to execute the code:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"poetry run python awel_tutorial/first_hello_world.py\n"})}),"\n",(0,t.jsx)(l.p,{children:'And you will see "Hello, world!" printed to the console.'}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"Hello, world!\n"})}),"\n",(0,t.jsx)(l.h2,{id:"anatomy-of-awel-code",children:"Anatomy Of AWEL Code"}),"\n",(0,t.jsx)(l.p,{children:"Let's break down the code you just wrote."}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-python",children:'with DAG("awel_hello_world") as dag:\n    task = MapOperator(map_function=lambda x: print(f"Hello, {x}!"))\n'})}),"\n",(0,t.jsxs)(l.p,{children:["This code creates a new DAG(directed acyclic graph) with the name ",(0,t.jsx)(l.code,{children:"awel_hello_world"}),".\nThe ",(0,t.jsx)(l.code,{children:"MapOperator"}),' is a simple operator that takes a function and calls it with the data\npassed to it. In this case, the function is a lambda that prints "Hello, world!" to the console.']}),"\n",(0,t.jsxs)(l.p,{children:["The task is the instance of the ",(0,t.jsx)(l.code,{children:"MapOperator"})," class. And we call the ",(0,t.jsx)(l.code,{children:"call"})," method of\nthe task with the ",(0,t.jsx)(l.code,{children:"call_data"})," parameter set to ",(0,t.jsx)(l.code,{children:'"world"'}),"."]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-python",children:'task._blocking_call(call_data="world")\n'})}),"\n",(0,t.jsxs)(l.p,{children:["When you call the task, the lambda function is called with the data(",(0,t.jsx)(l.code,{children:'"world"'}),") you passed to it."]}),"\n",(0,t.jsxs)(l.p,{children:["THe ",(0,t.jsx)(l.code,{children:"_blocking_call"})," method is used to call the task in a blocking way. Just for\ntesting here, and we will find a better way to call the task in the next section."]}),"\n",(0,t.jsxs)(l.h2,{id:"hello-world-with-asyncio",children:["Hello World With ",(0,t.jsx)(l.code,{children:"asyncio"})]}),"\n",(0,t.jsx)(l.p,{children:"ALL task calls in AWEL are asynchronous. This example shows how to run the task with\nasyncio."}),"\n",(0,t.jsxs)(l.p,{children:["Create a new file called ",(0,t.jsx)(l.code,{children:"first_hello_world_asyncio.py"})," in the ",(0,t.jsx)(l.code,{children:"awel_tutorial"})," directory and add the following code:"]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-python",children:'import asyncio\n\nfrom dbgpt.core.awel import DAG, MapOperator\n\nwith DAG("awel_hello_world") as dag:\n    task = MapOperator(map_function=lambda x: print(f"Hello, {x}!"))\n\nasyncio.run(task.call(call_data="world"))\n'})}),"\n",(0,t.jsx)(l.p,{children:"And run the following command to execute the code:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"poetry run python awel_tutorial/first_hello_world_asyncio.py\n"})}),"\n",(0,t.jsx)(l.p,{children:'And you will see "Hello, world!" printed to the console.'}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"Hello, world!\n"})}),"\n",(0,t.jsx)(l.h2,{id:"hello-world-with-two-tasks",children:"Hello World With Two Tasks"}),"\n",(0,t.jsx)(l.p,{children:"When we call a single node, we can pass data to it. This example shows how to pass data\nto tasks with a InputOperator."}),"\n",(0,t.jsxs)(l.p,{children:["Create a new file called ",(0,t.jsx)(l.code,{children:"first_hello_world_two_tasks.py"})," in the ",(0,t.jsx)(l.code,{children:"awel_tutorial"}),"\ndirectory and add the following code:"]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-python",children:'import asyncio\n\nfrom dbgpt.core.awel import DAG, MapOperator, InputOperator, SimpleCallDataInputSource\n\nwith DAG("awel_hello_world") as dag:\n    input_task = InputOperator(\n        input_source=SimpleCallDataInputSource()\n    )\n    task = MapOperator(map_function=lambda x: print(f"Hello, {x}!"))\n    input_task >> task\n    \n\nasyncio.run(task.call(call_data="world"))\n'})}),"\n",(0,t.jsx)(l.p,{children:"And run the following command to execute the code:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"poetry run python awel_tutorial/first_hello_world_two_tasks.py\n"})}),"\n",(0,t.jsx)(l.p,{children:'And you will see "Hello, world!" printed to the console.'}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"Hello, world!\n"})}),"\n",(0,t.jsxs)(l.p,{children:["In this case, we have two tasks. The first task is an ",(0,t.jsx)(l.code,{children:"InputOperator"})," that takes data\nfrom the ",(0,t.jsx)(l.code,{children:"SimpleCallDataInputSource"}),". The second task is a ",(0,t.jsx)(l.code,{children:"MapOperator"}),' that takes the\ndata from the first task and prints "Hello, world!" to the console.']}),"\n",(0,t.jsxs)(l.p,{children:["And we use the ",(0,t.jsx)(l.code,{children:">>"})," operator to connect the two tasks. This operator is used to define\nthe parent-child relationship between tasks, also known as the task dependency.\nYou can define the task dependency by using the ",(0,t.jsx)(l.code,{children:"set_downstream"})," method as well, flollowing is the example:"]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-python",children:"input_task.set_downstream(task)\n"})}),"\n",(0,t.jsxs)(l.p,{children:["The one task DAG above is a special case of the two tasks DAG, where the ",(0,t.jsx)(l.code,{children:"InputOperator"})," is not used."]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-python",children:'with DAG("awel_hello_world") as dag:\n    task = MapOperator(map_function=lambda x: print(f"Hello, {x}!"))\n\nasyncio.run(task.call(call_data="world"))\n'})}),"\n",(0,t.jsx)(l.h2,{id:"dag-visualization",children:"DAG Visualization"}),"\n",(0,t.jsx)(l.p,{children:"Install the graphviz package to visualize the DAG graph."}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"poetry add graphviz\n"})}),"\n",(0,t.jsxs)(l.p,{children:["Modify the ",(0,t.jsx)(l.code,{children:"first_hello_world_two_tasks.py"})," file to add the following code:"]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-python",children:"dag.visualize_dag()\n"})}),"\n",(0,t.jsx)(l.p,{children:"The full code is like this:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-python",children:'import asyncio\n\nfrom dbgpt.core.awel import DAG, MapOperator, InputOperator, SimpleCallDataInputSource\n\nwith DAG("awel_hello_world") as dag:\n    input_task = InputOperator(\n        input_source=SimpleCallDataInputSource()\n    )\n    task = MapOperator(map_function=lambda x: print(f"Hello, {x}!"))\n    input_task >> task\n\ndag.visualize_dag()\nasyncio.run(task.call(call_data="world"))\n'})}),"\n",(0,t.jsxs)(l.p,{children:["Run ",(0,t.jsx)(l.code,{children:"first_hello_world_two_tasks.py"})," again:"]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"poetry run python awel_tutorial/first_hello_world_two_tasks.py\n"})}),"\n",(0,t.jsx)(l.p,{children:"You will see the following output:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-bash",children:"InputOperator(node_id=a307d921-3bd0-423d-80f0-30aa25aaa9fe)\n -> MapOperator(node_id=bdb335f8-179d-4e08-b1ec-3b58a52d1e84)\nHello, world!\n"})}),"\n",(0,t.jsx)(l.p,{children:"The graph of the DAG is like this:"}),"\n",(0,t.jsx)("p",{align:"left",children:(0,t.jsx)("img",{src:"/img/awel/awel_tutorial/first_hello_world_two_tasks.png",width:"720px"})})]})}function h(e={}){const{wrapper:l}={...(0,a.R)(),...e.components};return l?(0,t.jsx)(l,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,l,n)=>{n.d(l,{R:()=>r,x:()=>s});var t=n(6540);const a={},o=t.createContext(a);function r(e){const l=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function s(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(o.Provider,{value:l},e.children)}}}]);