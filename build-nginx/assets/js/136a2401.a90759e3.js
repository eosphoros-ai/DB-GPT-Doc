"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5659],{5413:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var t=a(4848),r=a(8453);const o={},i="2.4 Branch Operator",s={id:"awel/awel_tutorial/basic_syntax/2.4_branch_operator",title:"2.4 Branch Operator",description:"The BranchOperator is used to decide which path to run based on the input data.",source:"@site/versioned_docs/version-v0.5.0/awel/awel_tutorial/basic_syntax/2.4_branch_operator.md",sourceDirName:"awel/awel_tutorial/basic_syntax",slug:"/awel/awel_tutorial/basic_syntax/2.4_branch_operator",permalink:"/docs/v0.5.0/awel/awel_tutorial/basic_syntax/2.4_branch_operator",draft:!1,unlisted:!1,tags:[],version:"v0.5.0",frontMatter:{},sidebar:"docs",previous:{title:"2.3 Join Operator",permalink:"/docs/v0.5.0/awel/awel_tutorial/basic_syntax/2.3_join_operator"},next:{title:"2.5 Streamify Operator",permalink:"/docs/v0.5.0/awel/awel_tutorial/basic_syntax/2.5_streamify_operator"}},c={},d=[{value:"Build A <code>BranchOperator</code> With A Branch Mapping",id:"build-a-branchoperator-with-a-branch-mapping",level:2},{value:"Implement A Custom <code>BranchOperator</code>",id:"implement-a-custom-branchoperator",level:2},{value:"Examples",id:"examples",level:2},{value:"Even Or Odd",id:"even-or-odd",level:3}];function h(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"24-branch-operator",children:"2.4 Branch Operator"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"BranchOperator"})," is used to decide which path to run based on the input data.\nExample, if you have two paths, you can decide which path to run based on the input data."]}),"\n",(0,t.jsxs)(e.p,{children:["There are two ways to use the ",(0,t.jsx)(e.code,{children:"BranchOperator"}),":"]}),"\n",(0,t.jsxs)(e.h2,{id:"build-a-branchoperator-with-a-branch-mapping",children:["Build A ",(0,t.jsx)(e.code,{children:"BranchOperator"})," With A Branch Mapping"]}),"\n",(0,t.jsxs)(e.p,{children:["Pass a dictionary of branch functions and task names to the ",(0,t.jsx)(e.code,{children:"BranchOperator"})," constructor."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from dbgpt.core.awel import DAG, BranchOperator, MapOperator\n\ndef branch_even(x: int) -> bool:\n    return x % 2 == 0\n\ndef branch_odd(x: int) -> bool:\n    return not branch_even(x)\n\nbranch_mapping = {\n    branch_even: "even_task",\n    branch_odd: "odd_task"\n}\n\nwith DAG("awel_branch_operator") as dag:\n    task = BranchOperator(branches=branch_mapping)\n    even_task = MapOperator(\n        task_name="even_task", \n        map_function=lambda x: print(f"{x} is even")\n    )\n    odd_task = MapOperator(\n        task_name="odd_task", \n        map_function=lambda x: print(f"{x} is odd")\n    )\n'})}),"\n",(0,t.jsxs)(e.p,{children:["In above example, the ",(0,t.jsx)(e.code,{children:"BranchOperator"})," has two child tasks, ",(0,t.jsx)(e.code,{children:"even_task"})," and ",(0,t.jsx)(e.code,{children:"odd_task"}),".\nThe ",(0,t.jsx)(e.code,{children:"BranchOperator"})," will decide which child task to run based on the input data.\nSo we pass a dictionary of branch functions and task names to the ",(0,t.jsx)(e.code,{children:"BranchOperator"}),"\nconstructor to define the branch mapping, in dictionary, the key is the branch function,\nand the value is the task name, when run the branch task, all the branch function will\nbe executed, if the branch function return ",(0,t.jsx)(e.code,{children:"True"}),", the task will be executed, otherwise,\nit will be skipped."]}),"\n",(0,t.jsxs)(e.h2,{id:"implement-a-custom-branchoperator",children:["Implement A Custom ",(0,t.jsx)(e.code,{children:"BranchOperator"})]}),"\n",(0,t.jsxs)(e.p,{children:["Just override the ",(0,t.jsx)(e.code,{children:"branches"})," method to return a dictionary of branch functions and task names."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from dbgpt.core.awel import DAG, BranchOperator, MapOperator\n\ndef branch_even(x: int) -> bool:\n    return x % 2 == 0\n\ndef branch_odd(x: int) -> bool:\n    return not branch_even(x)\n\nclass MyBranchOperator(BranchOperator[int]):\n    def __init__(self, even_task_name: str, odd_task_name: str, **kwargs):\n        self.even_task_name = even_task_name\n        self.odd_task_name = odd_task_name\n        super().__init__(**kwargs)\n        \n    async def branches(self):\n        return {\n            branch_even: self.even_task_name,\n            branch_odd: self.odd_task_name\n        }\n\nwith DAG("awel_branch_operator") as dag:\n    task = MyBranchOperator(even_task_name="even_task", odd_task_name="odd_task")\n    even_task = MapOperator(\n        task_name="even_task", \n        map_function=lambda x: print(f"{x} is even")\n    )\n    odd_task = MapOperator(\n        task_name="odd_task", \n        map_function=lambda x: print(f"{x} is odd")\n    )\n'})}),"\n",(0,t.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(e.h3,{id:"even-or-odd",children:"Even Or Odd"}),"\n",(0,t.jsxs)(e.p,{children:["Create a new file named ",(0,t.jsx)(e.code,{children:"branch_operator_even_or_odd.py"})," in the ",(0,t.jsx)(e.code,{children:"awel_tutorial"})," directory and add the following code:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom dbgpt.core.awel import (\n    DAG, BranchOperator, MapOperator, JoinOperator, \n    InputOperator, SimpleCallDataInputSource,\n    is_empty_data\n)\n\ndef branch_even(x: int) -> bool:\n    return x % 2 == 0\n\ndef branch_odd(x: int) -> bool:\n    return not branch_even(x)\n\nbranch_mapping = {\n    branch_even: "even_task",\n    branch_odd: "odd_task"\n}\n\ndef even_func(x: int) -> int:\n    print(f"Branch even, {x} is even, multiply by 10")\n    return x * 10\n\ndef odd_func(x: int) -> int:\n    print(f"Branch odd, {x} is odd, multiply by itself")\n    return x * x\n\ndef combine_function(x: int, y: int) -> int:\n    print(f"Received {x} and {y}")\n    # Return the first non-empty data\n    return x if not is_empty_data(x) else y\n    \nwith DAG("awel_branch_operator") as dag:\n    input_task = InputOperator(input_source=SimpleCallDataInputSource())\n    task = BranchOperator(branches=branch_mapping)\n    even_task = MapOperator(task_name="even_task", map_function=even_func)\n    odd_task = MapOperator(task_name="odd_task", map_function=odd_func)\n    join_task = JoinOperator(combine_function=combine_function)\n    input_task >> task >> even_task >> join_task\n    input_task >> task >> odd_task >> join_task\n\nprint("First call, input is 5")\nassert asyncio.run(join_task.call(call_data=5)) == 25\nprint("=" * 80)\nprint("Second call, input is 6")\nassert asyncio.run(join_task.call(call_data=6)) == 60\n'})}),"\n",(0,t.jsx)(e.p,{children:"And run the following command to execute the code:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"poetry run python awel_tutorial/branch_operator_even_or_odd.py\n"})}),"\n",(0,t.jsx)(e.p,{children:"And you will see the following output printed to the console."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"First call, input is 5\nBranch odd, 5 is odd, multiply by itself\nReceived EmptyData(SKIP_DATA) and 25\n================================================================================\nSecond call, input is 6\nBranch even, 6 is even, multiply by 10\nReceived 60 and EmptyData(SKIP_DATA)\n"})}),"\n",(0,t.jsx)(e.p,{children:"The graph of the DAG is like this:"}),"\n",(0,t.jsx)("p",{align:"left",children:(0,t.jsx)("img",{src:"/img/awel/awel_tutorial/branch_operator_example_1.png",width:"1000px"})}),"\n",(0,t.jsxs)(e.p,{children:["In above example, the ",(0,t.jsx)(e.code,{children:"BranchOperator"})," has two child tasks, ",(0,t.jsx)(e.code,{children:"even_task"})," and ",(0,t.jsx)(e.code,{children:"odd_task"}),",\nit will decide which child task to run based on the input data and the branches mapping."]}),"\n",(0,t.jsxs)(e.p,{children:["We also use the ",(0,t.jsx)(e.code,{children:"JoinOperator"})," to combine the data from both child tasks, if a path is\nskipped, the ",(0,t.jsx)(e.code,{children:"JoinOperator"})," will receive an ",(0,t.jsx)(e.code,{children:"EmptyData(SKIP_DATA)"})," as input data, and we\ncan use ",(0,t.jsx)(e.code,{children:"dbgpt.core.awel.is_empty_data"})," to check if the data is empty data."]})]})}function l(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}},8453:(n,e,a)=>{a.d(e,{R:()=>i,x:()=>s});var t=a(6540);const r={},o=t.createContext(r);function i(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);