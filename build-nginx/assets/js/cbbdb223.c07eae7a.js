"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9411],{5044:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(4848),s=n(8453);const a={},o="1.2 How AWEL Works",i={id:"awel/awel_tutorial/getting_started/1.2_how_works",title:"1.2 How AWEL Works",description:"Introduction",source:"@site/versioned_docs/version-v0.5.0/awel/awel_tutorial/getting_started/1.2_how_works.md",sourceDirName:"awel/awel_tutorial/getting_started",slug:"/awel/awel_tutorial/getting_started/1.2_how_works",permalink:"/docs/v0.5.0/awel/awel_tutorial/getting_started/1.2_how_works",draft:!1,unlisted:!1,tags:[],version:"v0.5.0",frontMatter:{},sidebar:"docs",previous:{title:"1.1 Hello World",permalink:"/docs/v0.5.0/awel/awel_tutorial/getting_started/1.1_hello_world"},next:{title:"1.3 Custom Operator",permalink:"/docs/v0.5.0/awel/awel_tutorial/getting_started/1.3_custom_operator"}},d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"DAG",id:"dag",level:2},{value:"What is a DAG?",id:"what-is-a-dag",level:3},{value:"Operator",id:"operator",level:2},{value:"What is an Operator?",id:"what-is-an-operator",level:3},{value:"Basic Operators",id:"basic-operators",level:3},{value:"High-level Operators",id:"high-level-operators",level:3},{value:"Task",id:"task",level:2},{value:"What is a Task?",id:"what-is-a-task",level:3},{value:"Runner",id:"runner",level:2},{value:"What is a Runner?",id:"what-is-a-runner",level:3}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"12-how-awel-works",children:"1.2 How AWEL Works"}),"\n",(0,r.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(t.p,{children:"Leet us look again at the DAG from the previous section:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import asyncio\n\nfrom dbgpt.core.awel import DAG, MapOperator, InputOperator, SimpleCallDataInputSource\n\nwith DAG("awel_hello_world") as dag:\n    input_task = InputOperator(\n        input_source=SimpleCallDataInputSource()\n    )\n    task = MapOperator(map_function=lambda x: print(f"Hello, {x}!"))\n    input_task >> task\n\ndag.visualize_dag()\nasyncio.run(task.call(call_data="world"))\n'})}),"\n",(0,r.jsxs)(t.p,{children:["There code contains a few new concepts: ",(0,r.jsx)(t.code,{children:"DAG"}),", ",(0,r.jsx)(t.code,{children:"Operator"}),", and ",(0,r.jsx)(t.code,{children:"Task"}),"."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"DAG"}),": ",(0,r.jsx)(t.code,{children:"DAG"})," is a class that represents a ",(0,r.jsx)(t.strong,{children:"Directed Acyclic Graph"}),". It is used to\ndefine the structure of the tasks and their dependencies."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Operator"}),": ",(0,r.jsx)(t.code,{children:"InputOperator"})," and ",(0,r.jsx)(t.code,{children:"MapOperator"})," are examples of operators. An operator\nis a node in the DAG. It can be a source of data, a transformation, or a sink of data.\nIn this example, ",(0,r.jsx)(t.code,{children:"InputOperator"})," is a source of data, and ",(0,r.jsx)(t.code,{children:"MapOperator"})," is a\ntransformation."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Task"}),": A task is an instance of an operator, it is a dynamic concept."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Runner"}),": A runner is used to execute the tasks in the DAG. When we\ncall ",(0,r.jsx)(t.code,{children:'task.call(call_data="world")'}),", we are using a runner to execute the task. The\n",(0,r.jsx)(t.code,{children:"DefaultWorkflowRunner"})," is run your task in the same process. And the\n",(0,r.jsx)(t.code,{children:"RayWorkflowRunner"})," is run your task in a Ray cluster(Not implemented yet in community\nversion)."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"dag",children:"DAG"}),"\n",(0,r.jsx)(t.h3,{id:"what-is-a-dag",children:"What is a DAG?"}),"\n",(0,r.jsx)(t.p,{children:"A Directed Acyclic Graph (DAG) is a graph that has a set of vertices and a set of\ndirected edges. The edges are directed from one vertex to another, and there are no\ncycles in the graph. In the context of AWEL, the vertices are the operators, and the\nedges are the dependencies between the operators."}),"\n",(0,r.jsx)(t.h2,{id:"operator",children:"Operator"}),"\n",(0,r.jsx)(t.h3,{id:"what-is-an-operator",children:"What is an Operator?"}),"\n",(0,r.jsxs)(t.p,{children:["An operator is a node in the DAG. It can be a source of data, a transformation, or a\ncall to a LLM service. In the context of AWEL, an operator is a class that inherits\nfrom the ",(0,r.jsx)(t.code,{children:"dbgpt.core.awel.BaseOperator"})," class."]}),"\n",(0,r.jsxs)(t.p,{children:["According to the type of output data, there are two types of operators:\n",(0,r.jsx)(t.strong,{children:"streaming operators"})," and ",(0,r.jsx)(t.strong,{children:"non-streaming operators"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"basic-operators",children:"Basic Operators"}),"\n",(0,r.jsx)(t.p,{children:"There are a few basic operators that are used to build up the more complex operators."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"InputOperator"}),": This ",(0,r.jsx)(t.strong,{children:"non-streaming"})," operator is used to get data from an input\nsource."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"MapOperator"}),": This ",(0,r.jsx)(t.strong,{children:"non-streaming"})," operator is used to apply a function to the\ninput data and return the transformed data."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"BranchOperator"}),": This ",(0,r.jsx)(t.strong,{children:"non-streaming"})," operator is used to decide which path to run\nbased on the input data."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"JoinOperator"}),": This ",(0,r.jsx)(t.strong,{children:"non-streaming"})," operator is used to join the data from multiple\npaths into a single path."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"StreamifyAbsOperator"}),": This ",(0,r.jsx)(t.strong,{children:"streaming"})," operator is used to convert the\nnon-streaming operator to a streaming operator."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"UnstreamifyAbsOperator"}),": This ",(0,r.jsx)(t.strong,{children:"non-streaming"})," operator is used to convert the\nstreaming data to non-streaming data."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"TransformStreamAbsOperator"}),": This ",(0,r.jsx)(t.strong,{children:"streaming"})," operator is used to transform the\nstreaming data to another streaming data."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"ReduceStreamOperator"}),": This ",(0,r.jsx)(t.strong,{children:"non-streaming"})," operator is used to reduce the\nstreaming to non-streaming data."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"TriggerOperator"}),": This ",(0,r.jsx)(t.strong,{children:"non-streaming"})," operator is used to trigger a task.\nIt is a special ",(0,r.jsx)(t.code,{children:"InputOperator"})]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"high-level-operators",children:"High-level Operators"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"RequestBuilderOperator"}),": This ",(0,r.jsx)(t.strong,{children:"non-streaming"})," operator is used to build a model\nrequest from the input data."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"LLMOperator"}),": This ",(0,r.jsx)(t.strong,{children:"non-streaming"})," operator is used to call a LLM service."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"StreamingLLMOperator"}),": This ",(0,r.jsx)(t.strong,{children:"streaming"})," operator is used to call a LLM service and\nexpect a streaming response."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"LLMBranchOperator"}),": This ",(0,r.jsx)(t.strong,{children:"non-streaming"})," operator is used to decide which path to\nrun based on the input data."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"OpenAIStreamingOutputOperator"}),": This ",(0,r.jsx)(t.strong,{children:"streaming"})," operator is transform the model\noutput to a streaming data compatible with the OpenAI."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"ChatHistoryPromptComposerOperator"}),": This ",(0,r.jsx)(t.strong,{children:"non-streaming"})," operator is used to build\na high-level task to compose a chat history  prompt."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"task",children:"Task"}),"\n",(0,r.jsx)(t.h3,{id:"what-is-a-task",children:"What is a Task?"}),"\n",(0,r.jsx)(t.p,{children:"Task is an instance of an operator. It is a stateless design, it means that the task\ncan be executed multiple times with different input data."}),"\n",(0,r.jsx)(t.p,{children:"Every task can receive multiple input data from the parent tasks, and return a single\noutput data to the child tasks."}),"\n",(0,r.jsx)(t.h2,{id:"runner",children:"Runner"}),"\n",(0,r.jsx)(t.h3,{id:"what-is-a-runner",children:"What is a Runner?"}),"\n",(0,r.jsxs)(t.p,{children:["A runner is a class that is used to execute the tasks in the DAG. When we call a task\nby ",(0,r.jsx)(t.code,{children:'task.call(call_data="world")'}),", we are using a runner to execute the task. It will\ntrigger all the parent tasks of the task, and then execute the task."]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"DefaultWorkflowRunner"})," is run your task in the same process. And the\n",(0,r.jsx)(t.code,{children:"RayWorkflowRunner"})," is run your task in a Ray cluster(Not implemented yet in community\nversion). Also, you can implement your own runner to run your task in your own\nenvironment."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(6540);const s={},a=r.createContext(s);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);